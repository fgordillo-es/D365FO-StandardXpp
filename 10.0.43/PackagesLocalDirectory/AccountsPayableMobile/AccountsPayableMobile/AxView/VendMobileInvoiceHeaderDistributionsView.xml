<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendMobileInvoiceHeaderDistributionsView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendMobileInvoiceHeaderDistributionsView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>L1SourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates SQL to indicate which <c>SourceDocumentLine</c> is the Level 1 value for the data representing a tree for accounting distributions.
    /// </summary>
    /// <returns>A sql string representing a column to indicate which <c>SourceDocumentLine</c> is the L1 value.</returns>
    public static str L1SourceDocumentLine()
    {
        /*
        Actual SQL generated by the code below for reference

        CASE
            WHEN T2.PARENTSOURCEDOCUMENTLINE = 0 THEN T2.RECID
            WHEN T4.RECID != 0 AND T4.PARENTSOURCEDOCUMENTLINE = 0 THEN T4.RecID
            ELSE T4.PARENTSOURCEDOCUMENTLINE
        END
        */

        const str t2PrefixWithReplacement = 'T2.%1';
        const str t4PrefixWithReplacement = 'T4.%1';

        str noParent = SysComputedColumn::equalExpression(strFmt(t2PrefixWithReplacement, fieldStr(SourceDocumentLine, ParentSourceDocumentLine)), '0');
        str self = strFmt(t2PrefixWithReplacement, fieldStr(SourceDocumentLine, RecId));
        
        str noGrandParent = SysComputedColumn::and2(
            SysComputedColumn::notEqualExpression(strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, RecId)), '0'),
            SysComputedColumn::equalExpression(strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, ParentSourceDocumentLine)), '0'));
        str parent = strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, RecId));
        
        Map whenThen = new Map(Types::String, Types::String);
        whenThen.insert(noParent, self);
        whenThen.insert(noGrandParent, parent);
        
        str grandParent = strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, ParentSourceDocumentLine));

        str caseStatement = SysComputedColumn::switch('', whenThen, grandParent);

        return caseStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>L2SourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates SQL to indicate which <c>SourceDocumentLine</c> is the Level 2 value for the data representing a tree for accounting distributions.
    /// </summary>
    /// <returns>A sql string representing a column to indicate which <c>SourceDocumentLine</c> is the L2 value.</returns>
    public static str L2SourceDocumentLine()
    {
        /*
        Actual SQL generated by the code below for reference

        CASE
            WHEN T2.PARENTSOURCEDOCUMENTLINE = 0 THEN N'0'
            WHEN T4.RECID != 0 AND T4.PARENTSOURCEDOCUMENTLINE = 0 THEN T2.RecID
            ELSE T4.RECID
        END
        */

        const str t2PrefixWithReplacement = 'T2.%1';
        const str t4PrefixWithReplacement = 'T4.%1';

        str noParent = SysComputedColumn::equalExpression(strFmt(t2PrefixWithReplacement, fieldStr(SourceDocumentLine, ParentSourceDocumentLine)), '0');
        
        str noGrandParent = SysComputedColumn::and2(
            SysComputedColumn::notEqualExpression(strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, RecId)), '0'),
            SysComputedColumn::equalExpression(strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, ParentSourceDocumentLine)), '0'));
        str self = strFmt(t2PrefixWithReplacement, fieldStr(SourceDocumentLine, RecId));
        
        Map whenThen = new Map(Types::String, Types::String);
        whenThen.insert(noParent, '0');
        whenThen.insert(noGrandParent, self);
        
        str parent = strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, RecId));

        str caseStatement = SysComputedColumn::switch('', whenThen, parent);

        return caseStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>L3SourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates SQL to indicate which <c>SourceDocumentLine</c> is the Level 3 value for the data representing a tree for accounting distributions.
    /// </summary>
    /// <returns>A sql string representing a column to indicate which <c>SourceDocumentLine</c> is the L3 value.</returns>
    public static str L3SourceDocumentLine()
    {
        /*
        Actual SQL generated by the code below for reference

        CASE
            WHEN T2.PARENTSOURCEDOCUMENTLINE = 0 THEN N'0'
            WHEN T4.RECID != 0 AND T4.PARENTSOURCEDOCUMENTLINE = 0 THEN N'0'
            ELSE T2.RECID
        END
        */
        const str t2PrefixWithReplacement = 'T2.%1';
        const str t4PrefixWithReplacement = 'T4.%1';

        str noParent = SysComputedColumn::equalExpression(strFmt(t2PrefixWithReplacement, fieldStr(SourceDocumentLine, ParentSourceDocumentLine)), '0');
        
        str noGrandParent = SysComputedColumn::and2(
            SysComputedColumn::notEqualExpression(strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, RecId)), '0'),
            SysComputedColumn::equalExpression(strFmt(t4PrefixWithReplacement, fieldStr(SourceDocumentLine, ParentSourceDocumentLine)), '0'));
        
        Map whenThen = new Map(Types::String, Types::String);
        whenThen.insert(noParent, '0');
        whenThen.insert(noGrandParent, '0');
        
        str self = strFmt(t2PrefixWithReplacement, fieldStr(SourceDocumentLine, RecId));
        
        str caseStatement = SysComputedColumn::switch('', whenThen, self);

        return caseStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHeaderDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to determine whether or not a given invoice has header distributions.
    /// </summary>
    /// <returns>A boolean indicating whether or not there are header distributions for a given record.</returns>
    public static boolean hasHeaderDistributions(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendMobileInvoiceHeaderDistributionsView vendMobileInvoiceHeaderDistributionsView;
        select count(InvoiceRecId) from vendMobileInvoiceHeaderDistributionsView
                where vendMobileInvoiceHeaderDistributionsView.InvoiceRecId == _vendInvoiceInfoTable.RecId;

        return vendMobileInvoiceHeaderDistributionsView.InvoiceRecId > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@AccountsPayableMobile:HeaderDistributions</Label>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InvoiceRecId</Name>
			<Label>@AccountsPayableMobile:VendInvoiceInfoTableRecId</Label>
			<DataField>RecId</DataField>
			<DataSource>VendInvoiceInfoTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountingDistributionRecId</Name>
			<Label>@SYS300392</Label>
			<DataField>RecId</DataField>
			<DataSource>AccountingDistribution</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceDocumentLineRecId</Name>
			<Label>@SYS317489</Label>
			<DataField>RecId</DataField>
			<DataSource>SourceDocumentLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>L1SourceDocumentLine</Name>
			<Label>@AccountsPayableMobile:Level1SourceDocumentLine</Label>
			<ViewMethod>L1SourceDocumentLine</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>L2SourceDocumentLine</Name>
			<Label>@AccountsPayableMobile:Level2SourceDocumentLine</Label>
			<ViewMethod>L2SourceDocumentLine</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>L3SourceDocumentLine</Name>
			<Label>@AccountsPayableMobile:Level3SourceDocumentLine</Label>
			<ViewMethod>L3SourceDocumentLine</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>VendInvoiceInfoTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>VendInvoiceInfoTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SourceDocumentLine</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>SourceDocumentLine</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>AccountingDistribution</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>AccountingDistribution</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>DimensionAttributeValueCombination</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>DimensionAttributeValueCombination</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<JoinDataSource>AccountingDistribution</JoinDataSource>
												<JoinRelationName>LedgerDimension</JoinRelationName>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>VendMobileInvoiceLineAllDistributionsView</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>VendMobileInvoiceLineAllDistributionsView</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>NoExistsJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>AccountingDistribution</JoinDataSource>
												<RelatedField>AccountingDistributionRecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>SourceDocumentLine</JoinDataSource>
										<RelatedField>SourceDocumentLine</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>ParentSourceDocumentLine</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>SourceDocumentLine</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ParentSourceDocumentLine</Field>
										<JoinDataSource>SourceDocumentLine</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SourceDocumentHeader</Field>
								<JoinDataSource>VendInvoiceInfoTable</JoinDataSource>
								<RelatedField>SourceDocumentHeader</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>ParmJobStatus</Name>
						<Field>ParmJobStatus</Field>
						<Value>!Executed</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>