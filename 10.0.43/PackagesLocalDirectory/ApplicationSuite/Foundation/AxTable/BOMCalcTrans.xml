<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCalcTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOMCalcTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constantCost</Name>
				<Source><![CDATA[
    public display CostConstantTotal constantCost()
    {
        return this.CostMarkup * this.NumOfSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constantSales</Name>
				<Source><![CDATA[
    public display InventSalesConstantTotal constantSales()
    {
        return this.SalesMarkup * this.NumOfSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumptionPcs</Name>
				<Source><![CDATA[
    public display InventQtyConsumptionPcs consumptionPcs()
    {
        return this.consumptionSum() / this.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumptionSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total consumption.
    /// </summary>
    /// <returns>
    /// The total consumption for the quantity specified for the current calculation.
    /// </returns>
    public display BOMCalcConsumptionSum consumptionSum()
    {
        return this.ConsumptionVariable + this.ConsumptionConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMargin</Name>
				<Source><![CDATA[
    public display ContributionMargin contributionMargin()
    {
        return this.salesPriceSum() - this.costPriceSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionRatio</Name>
				<Source><![CDATA[
    public display ContributionRatio contributionRatio()
    {
        if (this.salesPriceSum())
        {
            return this.contributionMargin() * 100 / this.salesPriceSum();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costMarkupSequence</Name>
				<Source><![CDATA[
    public display CostMarkup costMarkupSequence()
    {
        return this.CostMarkupQty * this.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total cost price per unit.
    /// </summary>
    /// <returns>
    /// The total cost price per unit for the quantity specified for the current calculation.
    /// </returns>
    public display BOMCalcCostPricePcs costPricePcs()
    {
        return this.costPriceSum() / this.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost price total.
    /// </summary>
    /// <returns>
    /// The total cost price for the quantity specified for the current calculation.
    /// </returns>
    public display BOMCalcCostPriceSum costPriceSum()
    {
        return (this.CostPriceQty * this.qty()) + this.CostMarkupQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceUnit</Name>
				<Source><![CDATA[
        public PriceUnit costPriceUnit()
    {
        return this.CostPriceUnit ? this.CostPriceUnit : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description for each item/resource number.
    /// </summary>
    /// <returns>
    /// The description for each item/resource number.
    /// </returns>
    public display EcoResDescription displayDescription()
    {
        return BOMCalcTrans::getDisplayDescription(this.CalcType, this.Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    public display UnitOfMeasureSymbol displayUnitId()
    {
        return this.BOMCalcTransMap::displayUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologImage</Name>
				<Source><![CDATA[
    public display ImageRes infologImage()
    {
        if (this.Infolog)
        {
            return BOMCalcCheckBase::infologWarningImage();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemWithCostBreakdown</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the BOM calculation line is an item line with a cost breakdown.
    /// </summary>
    /// <returns>
    ///    true if the line is an item with cost breakdown; otherwise, false.
    /// </returns>
    public boolean isItemWithCostBreakdown()
    {
        return    this.CalcType == ItemCalcType::Item
               && this.bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netWeightSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the net weight total.
    /// </summary>
    /// <returns>
    /// The total net weight for the quantity specified for the current calculation.
    /// </returns>
    public display BOMCalcNetWeightSum netWeightSum()
    {
        return this.NetWeightQty * this.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
        public Qty qty()
    {
        return this.Qty ? this.Qty : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupSeries</Name>
				<Source><![CDATA[
    public display InventSalesMarkup salesMarkupSeries()
    {
        return this.SalesMarkupQty * this.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPricePcs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total sales price per unit.
    /// </summary>
    /// <returns>
    /// The total sales price per unit for the quantity specified for the current calculation.
    /// </returns>
    public display BOMCalcSalesPricePcs salesPricePcs()
    {
        return this.salesPriceSum() / this.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales price total.
    /// </summary>
    /// <returns>
    /// The total sales price for the quantity specified for the current calculation.
    /// </returns>
    public display BOMCalcSalesPriceSum salesPriceSum()
    {
        return (this.SalesPriceQty * this.qty()) + this.SalesMarkupQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceUnit</Name>
				<Source><![CDATA[
        public PriceUnit salesPriceUnit()
    {
        return this.SalesPriceUnit ? this.SalesPriceUnit : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the infolog message captured during the current calculation.
    /// </summary>
    /// <param name="_addInfoAction">
    /// A Boolean value that indicates whether an action should be added; optional.
    /// </param>
    /// <param name="_bomCalcTable">
    /// A <c>BOMCalcTable</c> record used for the action; optional.
    /// </param>
    public void showInfolog(
        boolean         _addInfoAction = false,
        BOMCalcTable    _bomCalcTable  = null)
    {
        BOMCalcTrans::showCalculationInfolog(this, _addInfoAction, _bomCalcTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>variableCost</Name>
				<Source><![CDATA[
    display CostVariableTotal variableCost()
    {
        return (this.CostPrice / this.costPriceUnit()) * this.consumptionSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>variableSales</Name>
				<Source><![CDATA[
    display InventSalesPrice variableSales()
    {
        return (this.SalesPrice / this.salesPriceUnit()) * this.consumptionSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakdownExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified price calculation contains breakdown.
    /// </summary>
    /// <param name="_priceCalcId">
    /// The <c>PriceCalcId</c> identifying the price calculation.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    static boolean breakdownExist(PriceCalcId _priceCalcId)
    {
        return _priceCalcId
            && (select firstonly RecId from bomCalcTrans
                    where bomCalcTrans.PriceCalcId == _priceCalcId
                        && bomCalcTrans.ConsistOfPrice != '').RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BOMCalcTrans</c> table by using the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BOMCalcTrans</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be read for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BOMCalcTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static BOMCalcTrans findByRecId(
        BOMCalcTransRecId   _recId,
        boolean             _forUpdate = false)
    {
        BOMCalcTrans  bomCalcTrans;

        bomCalcTrans.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly bomCalcTrans
                where bomCalcTrans.RecId == _recId;
        }

        return bomCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayDescription</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets the description for the specified item/resource number.
    /// </summary>
    /// <param name="_calcType">
    /// The calculation type of the <c>BOMCalcTrans</c> record.
    /// </param>
    /// <param name="_resource">
    /// The resource of the <c>BOMCalcTrans</c> record.
    /// </param>
    /// <returns>
    /// The description for the specified item/resource number.
    /// </returns>
    public static EcoResDescription getDisplayDescription(
        ItemCalcType    _calcType,
        BOMCalcResource _resource)
    {
        EcoResDescription           resDescription;
        WrkCtrTable                 wrkCtrTable;
        InventTable                 inventTable;
        EcoResProductTranslation    ecoResProductTranslation;
        CostSheetId                 costSheetId;
        CostSheetNodeTable          costSheetNode;

        switch (_calcType)
        {
            case ItemCalcType::Production:
            case ItemCalcType::Purchase:
            case ItemCalcType::CostGroup:
            case ItemCalcType::Item:
            case ItemCalcType::BOM:
            case ItemCalcType::Service:
            case ItemCalcType::Burden:
                select firstonly Name from ecoResProductTranslation
                    exists join inventTable
                        where ecoResProductTranslation.Product == inventTable.Product
                            && ecoResProductTranslation.LanguageId == CompanyInfo::languageId()
                            && inventTable.ItemId == _resource;

                resDescription = ecoResProductTranslation.Name;
                break;

            case ItemCalcType::Setup:
            case ItemCalcType::Process:
            case ItemCalcType::Qty:
                select firstonly Name from wrkCtrTable
                    where wrkCtrTable.WrkCtrId == _resource;

                resDescription = wrkCtrTable.Name;
                break;

            case ItemCalcType::IndirectInUnitBased:
            case ItemCalcType::IndirectOutUnitBased:
            case ItemCalcType::IndirectPurchUnitBased:
            case ItemCalcType::IndirectRate:
            case ItemCalcType::IndirectSurcharge:
                costSheetId = CostSheetTable::defaultCostSheetTable().SheetId;
                costSheetNode = CostSheetNodeTable::findNodeByCodeAndPriceType(costSheetId, _resource, CostPriceType::COGM);
                if (!costSheetNode)
                {
                    costSheetNode = CostSheetNodeTable::findNodeByCodeAndPriceType(costSheetId, _resource, CostPriceType::Purchase);
                }
                if (!costSheetNode)
                {
                    resDescription = "";
                }
                else
                {
                    resDescription = costSheetNode.Description;
                }
                break;

            default:
                resDescription = "";
                break;
        }

        return resDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestOprNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the highest operation number for a specified level and a <c>PriceCalcId</c> value.
    /// </summary>
    /// <param name="_priceCalcId">
    ///    The <c>PriceCalcId</c> value for which the highest operation number should be found.
    /// </param>
    /// <param name="_level">
    ///    The level for which the highest operation number should be found.
    /// </param>
    /// <returns>
    ///    The highest operation number.
    /// </returns>
    public static OprNum highestOprNum(
        PriceCalcId  _priceCalcId,
        Level        _level)
    {
        return (select maxof(OprNum) from bomCalcTrans
                    where bomCalcTrans.PriceCalcId == _priceCalcId
                       && bomCalcTrans.Level       == _level).OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCalculationInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the infolog message captured during the current calculation.
    /// </summary>
    /// <param name="_bomCalcTrans">
    /// A <c>BOMCalcTrans</c> record containing the infolog.
    /// </param>
    /// <param name="_addInfoAction">
    /// A Boolean value that indicates whether an action should be added; optional.
    /// </param>
    /// <param name="_bomCalcTable">
    /// A <c>BOMCalcTable</c> record used for the action; optional.
    /// </param>
    public static void showCalculationInfolog(
        BOMCalcTrans    _bomCalcTrans,
        boolean         _addInfoAction = false,
        BOMCalcTable    _bomCalcTable  = null)
    {
        BOMCalcInfoAction   bomCalcInfoAction;
        int                 oldInfologLen;
        int                 infoLogEntryIndex, start, end, infoLogContainerLength;
        container           infoLogContainer, currentEntry;
        int                 entryLen, entryType;
        str                 entryText;

        infoLogContainer = _bomCalcTrans.Infolog;
        infoLogContainerLength = conLen(infoLogContainer);

        // Must have at least one element
        if (infoLogContainerLength == 0)
        {
            return;
        }

        // first element is a container with one integer element (version)
        if (   typeOf(conPeek(infoLogContainer, 1)) != Types::Container
            || conLen(conPeek(infoLogContainer, 1)) != 1
            || typeOf(conPeek(conPeek(infoLogContainer, 1), 1)) != Types::Integer)
        {
            return;
        }

        // Save the current number of entries
        oldInfologLen = infolog.num();

        // append to the info log
        for (infoLogEntryIndex = 2; infoLogEntryIndex <= infoLogContainerLength; infoLogEntryIndex++)
        {
            // each entry is a container
            if (typeOf(conPeek(infoLogContainer, infoLogEntryIndex)) != Types::Container)
            {
                break;
            }

            // Get the current entry
            currentEntry = conPeek(infoLogContainer, infoLogEntryIndex);

            // Get the current entry length
            entryLen = conLen(currentEntry);

            // entries can be formatted in 2 ways
            // 1. [exceptionType, Text]
            // 2. [exceptionType, Text, helpUrl, actionClassId, action]
            // 3. [exceptionType, Text, KernelLabelId]
            if (    entryLen != 2
                &&  entryLen != 5
                &&  entryLen != 3)
            {
                break;
            }

            // Validate types
            if (   typeOf(conPeek(currentEntry, 1)) != Types::Integer
                || typeOf(conPeek(currentEntry, 2)) != Types::String)
            {
                break;
            }

            // Extract the first 2 values in the entry
            entryType = conPeek(currentEntry, 1);
            entryText = conPeek(currentEntry, 2);

            // if there was already a BOMCalcInfoAction in the entry, just pass it on
            if (   entryLen == 5
                && conPeek(currentEntry, 4) == classNum(BOMCalcInfoAction))
            {
                infolog.addSysInfoAction('', classNum(BOMCalcInfoAction), conPeek(currententry, 5));
            }
            else
            {
                // add infoAction class
                if (_addInfoAction)
                {
                    bomCalcInfoAction = BOMCalcInfoAction::newFormnameRecord(formStr(BOMCalcTrans), _bomCalcTrans);
                    bomCalcInfoAction.parmCallerBuffer(_bomCalcTable);

                    infolog.addSysInfoAction('', classNum(BOMCalcInfoAction), bomCalcInfoAction.pack());
                }
            }

            // Add the entry to the current infolog
            BOMCalcCheckBase::infologMsgAdd(entryType, entryText);
        }

        // Revert in the case of failure
        if (infoLogEntryIndex < infoLogContainerLength)
        {
            start = oldInfologLen + 1;
            end   = oldInfologLen + infoLogEntryIndex - 2;

            if (start >= infolog.num())
            {
                infolog.cut(start, end);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReNumberLevelNum</Name>
				<Source><![CDATA[
        private static void updateReNumberLevelNum(
        Map _mapOprNumNext,
        Map _mapOprLevel,
        Map _mapOprNum,
        OprNum _oprNum)
    {
        int             currentParent;
        int             currentChild;
        int             numOfLevels;
        List            parentsToAnalyze;
        ListEnumerator  parentsToAnalyzeEnumerator;
        List            tempListOfParents;
        List            children;
        ListEnumerator  childrenEnumerator;

        #Define.OprNumAdd(10)

        if (!_mapOprNumNext)
        {
            return;
        }
        //at the beginning we have to analyze children of root element (0)
        //assuming that 0 should not be in result collection and children of 0 have level equal to _level+1
        parentsToAnalyze = new List(Types::Integer);
        parentsToAnalyze.addEnd(0);
        numOfLevels = 0;
        //_mapOprNumNext has structure {<oprNumNext> -> <oprNum1, oprNum2, ... >} which is representation of a tree
        //here we implement Breadth First Search (BFS); starting from list containing only 0 (root element) we build list of all elements at level 1, then, having
        //list of all elements at level 1 we build list of all elements at level 2 and so on.
        while (!parentsToAnalyze.empty())
        {
            tempListOfParents =  new List(Types::Integer);
            numOfLevels++;
            parentsToAnalyzeEnumerator = parentsToAnalyze.getEnumerator();
            while (parentsToAnalyzeEnumerator.moveNext())
            {
                currentParent = parentsToAnalyzeEnumerator.current();
                if (_mapOprNumNext.exists(currentParent))
                {
                    children = _mapOprNumNext.lookup(currentParent);
                    childrenEnumerator = children.getEnumerator();
                    while (childrenEnumerator.moveNext())
                    {
                        currentChild = childrenEnumerator.current();
                        tempListOfParents.addEnd(currentChild);
                        //_mapOprLevel is map {element -> level}
                        _mapOprLevel.insert(currentChild, numOfLevels);
                        //_mapOprNum is filled with operation ids in reverse order
                        _mapOprNum.insert(currentChild, _oprNum - currentChild + #OprNumAdd);
                    }
                }
            }
            parentsToAnalyze = tempListOfParents;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReNumberOprNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Renumbers the operation numbers in the <c>BOMCalcTrans</c> records.
    /// </summary>
    /// <param name="_priceCalcId">
    ///    The <c>priceCalcId</c> value to renumber.
    /// </param>
    /// <param name="_level">
    ///    The level to renumber.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Operation numbers are missing.
    /// </exception>
    static void updateReNumberOprNum(
        PriceCalcId _priceCalcId,
        Level       _level)
    {
        #Define.OprNumAdd(10)

        BOMCalcTrans        bomCalcTrans;

        OprNum              oprNum;
        OprNum              oprNumLast;

        OprNum              oprNumHighest;

        Map                 mapOprNum       = new Map(Types::Integer,Types::Integer);
        Map                 mapOprNumNext   = new Map(Types::Integer, Types::Class);
        Map                 mapOprLevel;

        List                listOprNum;
        RouteParameters     routeParameters = RouteParameters::find();
        ttsbegin;

        if (routeParameters.Network)
        {
            while select OprNum from bomCalcTrans
                order by RouteLevel desc, OprNum desc
                where bomCalcTrans.PriceCalcId == _priceCalcId
                   && bomCalcTrans.Level       == _level
                   && ( bomCalcTrans.CalcType  == ItemCalcType::Process
                     || bomCalcTrans.CalcType  == ItemCalcType::Qty
                     || bomCalcTrans.CalcType  == ItemCalcType::Setup )
            {
                if (bomCalcTrans.OprNum != oprNumLast)
                {
                    oprNumLast  = bomCalcTrans.OprNum;
                    oprNum     += #oprNumAdd;
                }

                mapOprNum.insert(bomCalcTrans.OprNum,oprNum);

                oprNumHighest = max(oprNumHighest, max(oprNum, oprNumLast));
            }
        }
        else
        {
            //Not allowed to make complex network, so order the route lineary

            mapOprLevel = new Map(Types::Integer, Types::Integer);

            while select OprNum, OprNumNext from bomCalcTrans
                order by OprNum
                where bomCalcTrans.PriceCalcId == _priceCalcId
                   && bomCalcTrans.Level       == _level
                   && ( bomCalcTrans.CalcType  == ItemCalcType::Process
                     || bomCalcTrans.CalcType  == ItemCalcType::Qty
                     || bomCalcTrans.CalcType  == ItemCalcType::Setup )
            {
                if (bomCalcTrans.OprNum == oprNumLast)
                {
                    continue;
                }

                oprNumLast = bomCalcTrans.OprNum;

                if (mapOprNumNext.exists(bomCalcTrans.OprNumNext))
                {
                    listOprNum = mapOprNumNext.lookup(bomCalcTrans.OprNumNext);
                }
                else
                {
                    listOprNum = new List(Types::Integer);
                }

                listOprNum.addStart(bomCalcTrans.OprNum);
                mapOprNumNext.insert(bomCalcTrans.OprNumNext, listOprNum);

                oprNumHighest += #oprNumAdd;
                oprNumHighest = max(oprNumHighest, oprNumLast);
            }

            oprNum = oprNumHighest;
            BOMCalcTrans::updateReNumberLevelNum(mapOprNumNext, mapOprLevel, mapOprNum, oprNum);
        }

        while select forupdate bomCalcTrans
            order by RecId
            where bomCalcTrans.PriceCalcId == _priceCalcId
               && bomCalcTrans.Level       == _level
               && ( bomCalcTrans.CalcType  == ItemCalcType::Process
                 || bomCalcTrans.CalcType  == ItemCalcType::Qty
                 || bomCalcTrans.CalcType  == ItemCalcType::Setup )
        {
            if (! mapOprNum.exists(bomCalcTrans.OprNum))
            {
                throw error("@SYS75220");
            }

            if (!routeParameters.Network)
            {
                bomCalcTrans.RouteLevel = mapOprLevel.lookup(bomCalcTrans.OprNum);
            }

            bomCalcTrans.OprNum = mapOprNum.lookup(bomCalcTrans.OprNum) + oprNumHighest;

            if (bomCalcTrans.OprNumNext)
            {
                if (! mapOprNum.exists(bomCalcTrans.OprNumNext))
                {
                    throw error(strFmt("@SYS25611",bomCalcTrans.OprNum));
                }

                if (routeParameters.Network)
                {
                    bomCalcTrans.OprNumNext = mapOprNum.lookup(bomCalcTrans.OprNumNext) + oprNumHighest;
                }
                else
                {
                    bomCalcTrans.OprNumNext = bomCalcTrans.OprNum + #oprNumAdd;
                }
            }

            bomCalcTrans.doUpdate();
        }

        while select forupdate bomCalcTrans
            order by RecId
            where bomCalcTrans.PriceCalcId == _priceCalcId
               && bomCalcTrans.Level       == _level
               && ( bomCalcTrans.CalcType  == ItemCalcType::Process
                 || bomCalcTrans.CalcType  == ItemCalcType::Qty
                 || bomCalcTrans.CalcType  == ItemCalcType::Setup )
        {
            bomCalcTrans.OprNum = bomCalcTrans.OprNum - oprNumHighest;

            if (bomCalcTrans.OprNumNext)
            {
                bomCalcTrans.OprNumNext = bomCalcTrans.OprNumNext - oprNumHighest;
            }

            bomCalcTrans.doUpdate();
        }

        while select forupdate bomCalcTrans
            where bomCalcTrans.PriceCalcId == _priceCalcId
               && bomCalcTrans.Level       == _level
               && ( bomCalcTrans.CalcType  == ItemCalcType::Item
                 || bomCalcTrans.CalcType  == ItemCalcType::Service
                 || bomCalcTrans.CalcType  == ItemCalcType::BOM )

        {
            if (mapOprNum.exists(bomCalcTrans.OprNum))
            {
                bomCalcTrans.OprNum  = mapOprNum.lookup(bomCalcTrans.OprNum);
            }
            else
            {
                bomCalcTrans.OprNum  = 0;
            }

            bomCalcTrans.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOMCalcTable</Name>
				<Source><![CDATA[
        public BOMCalcTable BOMCalcTable(BOMCalcTable _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('BOMCalcTable');
            }
            else
            {
                return this.setLink('BOMCalcTable', _relatedTable);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>BOMCalcTrans</Name>
				<Source><![CDATA[
        public BOMCalcTrans BOMCalcTrans(BOMCalcTrans _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('BOMCalcTrans');
            }
            else
            {
                return this.setLink('BOMCalcTrans', _relatedTable);
            }
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BOM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124090</DeveloperDocumentation>
	<FormRef>BOMCalcTrans</FormRef>
	<Label>@SYS22213</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>PriceCalcId</TitleField1>
	<TitleField2>Resource</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>NumIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumptionVariable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumptionConstant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkupQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkupQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsistOf</Name>
			<Label>@SYS4009601</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsistOfPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Consumption</Name>
			<Label>@SYS853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsumptionVariable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumptionConstant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumptionInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>consumptionSum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>consumptionPcs</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contribution</Name>
			<Label>@SYS94174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>contributionMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contributionRatio</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@Sys13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkupQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceModelUsed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceSecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkupSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grouping</Name>
			<Label>@SYS73445</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimStr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceCalcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NetWeight</Name>
			<Label>@SYS23743</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NetWeightQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>netWeightSum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@Sys5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkupQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceModelUsed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SecondaryCost_RU</Name>
			<Label>@GLS102435</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPriceQtySecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkupQtySecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Series</Name>
			<Label>@SYS15825</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumOfSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentBOMCalcTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TradeAgreements</Name>
			<Label>@SYS28190</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceDiscQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcBOMConsumption</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalcGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ItemCalcType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsistOfPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcConsistOf</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumptionConstant</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcConsumptionConstant</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumptionInvent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS853</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumptionVariable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcConsumptionVariable</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsumpType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMConsumpType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS22172</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkupQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcCostMarkupQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkupQtySecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceMarkupSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkupSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcCostPriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostPriceFallBackVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostPriceModelUsed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCalcCostPriceUsed</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPriceQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcCostPriceQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPriceQtySecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPriceSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Infolog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InfologData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS70071</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimStr</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcInventDimStr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMLevel</ExtendedDataType>
			<Label>@Sys14422</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetWeightQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcNetWeightQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NumOfSeries</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS7720</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OprId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNumNext</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNumNext</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OprPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RouteOprPriority</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentBOMCalcTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcTransRecId</ExtendedDataType>
			<Label>@SYS4009597</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceCalcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCalcId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceDiscQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcPriceDiscQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Resource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcResource</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RouteLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteLevel</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkupQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSalesPrice</ExtendedDataType>
			<Label>@SYS6702</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesPriceFallBackVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesPriceModelUsed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCalcSalesPriceUsed</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPriceQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSalesPrice</ExtendedDataType>
			<Label>@SYS23715</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostCalculationMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>BOMCostCalculationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Null>Yes</Null>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PriceCalcId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ConsistOfIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PriceCalcId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConsistOfPrice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentBOMCalcTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BOMCalcTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CostGroupId</MapField>
					<MapFieldTo>CostGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Level</MapField>
					<MapFieldTo>Level</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimStr</MapField>
					<MapFieldTo>InventDimStr</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcGroupId</MapField>
					<MapFieldTo>CalcGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcType</MapField>
					<MapFieldTo>CalcType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOM</MapField>
					<MapFieldTo>BOM</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCalcGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCalcGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalcGroupId</Name>
					<Field>CalcGroupId</Field>
					<RelatedField>CalcGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalcGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOMCalcTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124091</EntityRelationshipRole>
			<RelatedTable>BOMCalcTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Calculation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceCalcId</Name>
					<Field>PriceCalcId</Field>
					<RelatedField>PriceCalcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCostGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostGroupId</Name>
					<Field>CostGroupId</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CostGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConsistOfBOMCalcTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>BOMCalcTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsistOfPrice</Name>
					<Field>ConsistOfPrice</Field>
					<RelatedField>PriceCalcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CostPriceFallBackCostingVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CostingVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CostPriceFallBackCostingVersion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOMCalcTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostPriceFallBackVersion</Name>
					<SourceEDT>CostingVersionId</SourceEDT>
					<Field>CostPriceFallBackVersion</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VersionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::BOM</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventoryItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableProd</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableService</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Service</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ParentBOMCalcTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>BOMCalcTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentBOMCalcTrans</Name>
					<Field>ParentBOMCalcTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ConsistOfIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOprTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteOprTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprId</Name>
					<Field>OprId</Field>
					<RelatedField>OprId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OprIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesPriceFallBackCostingVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CostingVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesPriceFallBackCostingVersion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOMCalcTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPriceFallBackVersion</Name>
					<SourceEDT>CostingVersionId</SourceEDT>
					<Field>SalesPriceFallBackVersion</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VersionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendId</Name>
					<Field>VendId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableProcess</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProcessResource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Process</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableQty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>QuantityResource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Qty</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SetupResource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomCalculationTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Setup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>